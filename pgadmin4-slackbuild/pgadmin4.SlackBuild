#!/bin/bash

# Updated for pgAdmin4 version 9.5
# Date: July/01/2025

# Slackware build script for pgadmin4
# Copyright 2019 Jeremy Hansen jebrhansen+SBo -at- gmail.com
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Modified by: Wael Hammoudeh - w_hammoudeh at hotmail.com

CWD=$(pwd)
PRGNAME=pgadmin4
VERSION="9.5"
BUILD=${BUILD:-1}
TAG=${TAG:-_wh}

OUTPUT=${OUTPUT:-/tmp}
TMP=${TMP:-/tmp/WH}

# call uname() to set ARCH
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

LIBDIRSUFFIX=""
if [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
fi

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

# we do not set any compiler flags now; it might be useful in the future!
# CFLAGS="$SLKCFLAGS" CXXFLAGS="$SLKCFLAGS"

# Pre-download electron zipped file AND source tar ball
ELEC_VER="35.4.0"
ELEC_NAME=electron-v${ELEC_VER}-linux-x64

if [ ! -f $CWD/${PRGNAME}-${VERSION}.tar.gz ]; then
    echo "Missing source for $PRGNAME. Exiting"
    exit 1
fi

if [ ! -f $CWD/${ELEC_NAME}.zip ]; then
    echo "Missing source for zipped electron file. Exiting"
    exit 1
fi

# we need postgresql bin directory in our path
PG_PATH=`/usr/bin/pg_config --bindir`

if [ -z "$PG_PATH" ]; then
    echo "Could not get postgresql binary directory from \"pg_config.\""
    echo "Is postgresql package installed? Exiting."
    exit 1
fi

export PATH=$PG_PATH:$PATH

# exit on error
set -e

# Debugging shizz
trap 'ERRCODE=$? && if [ ${ERRCODE} -ne 0 ]; then echo "The command \"${BASH_COMMAND}\" failed with exit code ${ERRCODE}."; fi' EXIT

# STAGE is where we unpack sources
STAGE=$TMP/stage-$PRGNAME

SOURCEDIR=${STAGE}/${PRGNAME}-${VERSION}

ELEC_DIR=${STAGE}/${ELEC_NAME}

# make skelton directories for our package -- also /usr/doc/$PRGNAME-$VERSION
BUILDROOT=$TMP/$PRGNAME
PKGROOT=$BUILDROOT/opt/$PRGNAME
PKGBIN=$PKGROOT/bin
PKGVENV=$PKGROOT/venv
PKGWEB=$PKGROOT/web
PKGMETA=$PKGROOT/meta
PKGDOCS=$PKGROOT/docs
SYS_SHARE=$BUILDROOT/usr/share

# start with empty directories
rm -rf ${STAGE} ${BUILDROOT}

mkdir -p $TMP $OUTPUT $STAGE $BUILDROOT $PKGROOT \
               $PKGBIN $PKGVENV $SYS_SHARE $PKGMETA

# PKGWEB=$PKGROOT/web directory will be copied from source below!

/usr/bin/corepack enable

cd ${STAGE}

tar xvzf $CWD/${PRGNAME}-${VERSION}.tar.gz

cd ${SOURCEDIR}

# set sane permissions
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# see $SOURCEDIR/pkg/linux/build-functions.sh file

echo "Creating the virtual environment..."

cd $PKGROOT

# Create the blank venv -- in our PKGVENV directory
python3 -m venv $PKGVENV
source $PKGVENV/bin/activate

# Make sure we have the wheel package present, as well as the latest pip
pip3 install --upgrade pip
pip3 install wheel

# Sphinx module is not included in Slackware, add to requirements.txt file;
# needed to build docs, sphinxcontrib.youtube does not get installed?!
echo "" >> ${SOURCEDIR}/requirements.txt
echo "sphinx>=4.0,<6.0" >> ${SOURCEDIR}/requirements.txt
echo "sphinxcontrib.youtube" >> ${SOURCEDIR}/requirements.txt

# Install the requirements for venv

pip3 install --no-cache-dir --no-binary psycopg,gssapi -r "${SOURCEDIR}/requirements.txt"

# append to line above to create log: 2>&1 | tee pip-install.log

VENVPATH="/opt/$PRGNAME/venv"

# Fixup the paths in the venv activation scripts -- note double quets
sed -i "s|VIRTUAL_ENV=.*|VIRTUAL_ENV=\"$VENVPATH\"|g" venv/bin/activate
sed -i "s|setenv VIRTUAL_ENV .*|setenv VIRTUAL_ENV \"$VENVPATH\"|g" venv/bin/activate.csh
sed -i "s|set -gx VIRTUAL_ENV .*|set -gx VIRTUAL_ENV \"$VENVPATH\"|g" venv/bin/activate.fish

# line below reduces package size a lot, we also KEEP Sphinx in venv
rm -rf ${PKGVENV}/bin/__pycache__

# Fixup hash bangs -- scripts in venv call their own python3
sed -i 's/#!.*\/python3/#\!\/opt\/pgadmin4\/venv\/bin\/python3/g' venv/bin/*

# Figure out some paths for use when completing the venv
# Use "python3" here as we want the venv path
PYMODULES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())")
DIR_PYMODULES_PATH=`dirname ${PYMODULES_PATH}`

# Use /usr/bin/python3 here as we want the system path
PYSYSLIB_PATH=$(/usr/bin/python3 -c "import sys; print('%s/lib64/python%d.%.d' % (sys.prefix, sys.version_info.major, sys.version_info.minor))")

# Symlink in the rest of the Python libs. This is required because the runtime
# will clear PYTHONHOME for safety, which has the side-effect of preventing
# it from finding modules that are not explicitly included in the venv
cd ${DIR_PYMODULES_PATH}

# Files
for FULLPATH in ${PYSYSLIB_PATH}/*.py; do
    FILE=${FULLPATH##*/}
    if [ ! -e ${FILE} ]; then
        ln -s ${FULLPATH} ${FILE}
    fi
done

# Paths
for FULLPATH in ${PYSYSLIB_PATH}/*/; do
    FULLPATH=${FULLPATH%*/}
    FILE=${FULLPATH##*/}
    if [ ! -e ${FILE} ]; then
        ln -s ${FULLPATH} ${FILE}
    fi
done

# Remove tests
cd site-packages
find . -name "test" -type d -print0 | xargs -0 rm -rf
find . -name "tests" -type d -print0 | xargs -0 rm -rf

# Link the python<version> directory to python so that the private environment path is found by the application.
if test -d ${DIR_PYMODULES_PATH}; then
    ln -s $(basename ${DIR_PYMODULES_PATH}) ${DIR_PYMODULES_PATH}/../python
fi

# Remove any TCL-related files that may cause us problems
find "${PKGVENV}/" -name "_tkinter*" -print0 | xargs -0 rm -rf

# Start build runtime

cd ${STAGE}

unzip $CWD/${ELEC_NAME}.zip -d ${ELEC_NAME}

# Change the permission for others and group the same as the owner
chmod -R og=u "${ELEC_NAME}"/*

# Explicitly remove write permissions for others and group
chmod -R og-w "${ELEC_NAME}"/*

cp -r ${ELEC_DIR}/* ${PKGBIN}/

# rename electron to pgadmin4
mv ${PKGBIN}/electron ${PKGBIN}/${PRGNAME}

mkdir -p "${PKGBIN}/resources/app"

cp -r "${SOURCEDIR}/runtime/assets" "${PKGBIN}/resources/app/assets"
cp -r "${SOURCEDIR}/runtime/src" "${PKGBIN}/resources/app/src"

cp "${SOURCEDIR}/runtime/package.json" "${PKGBIN}/resources/app"
cp "${SOURCEDIR}/runtime/.yarnrc.yml" "${PKGBIN}/resources/app"

# Install the runtime node_modules

cd "${PKGBIN}/resources/app"
yarn set version berry
yarn set version 4
yarn workspaces focus --production

# remove the yarn cache
rm -rf .yarn .yarn*

# Install icons
install -Dm 644 ${SOURCEDIR}/pkg/linux/${PRGNAME}-16x16.png \
                "${SYS_SHARE}/icons/hicolor/16x16/apps/${PRGNAME}.png"
install -Dm 644 ${SOURCEDIR}/pkg/linux/${PRGNAME}-32x32.png \
                "${SYS_SHARE}/icons/hicolor/32x32/apps/${PRGNAME}.png"
install -Dm 644 ${SOURCEDIR}/pkg/linux/${PRGNAME}-48x48.png \
                "${SYS_SHARE}/icons/hicolor/48x48/apps/${PRGNAME}.png"
install -Dm 644 ${SOURCEDIR}/pkg/linux/${PRGNAME}-64x64.png \
                "${SYS_SHARE}/icons/hicolor/64x64/apps/${PRGNAME}.png"
install -Dm 644 ${SOURCEDIR}/pkg/linux/${PRGNAME}-128x128.png \
                "${SYS_SHARE}/icons/hicolor/128x128/apps/${PRGNAME}.png"

# fix path in desktop file
sed -i 's/Exec=\/usr\/pgadmin4\/bin\/pgadmin4/Exec=\/opt\/pgadmin4\/bin\/pgadmin4/' \
           ${SOURCEDIR}/pkg/linux/pgadmin4.desktop
install -Dm 644 "${SOURCEDIR}/pkg/linux/pgadmin4.desktop" \
                "${SYS_SHARE}/applications/pgadmin4.desktop"

# End build runtime

# use just built PVE to build docs
echo "Building the documentation..."

PKGDOCS=$PKGROOT/docs

mkdir -p ${PKGDOCS}/en_US/html
cd ${SOURCEDIR}/docs/en_US

# START docs build from pgadmin4 version 9.5
SYSTEM_PYTHON_PATH='/usr/bin/python3.9'
python3 build_code_snippet.py
SYS_PYTHONPATH=$("${SYSTEM_PYTHON_PATH}" -c "import sys; print(':'.join([p for p in sys.path if p]))")
# shellcheck disable=SC2153
PYTHONPATH=$PYTHONPATH:${SYS_PYTHONPATH} python3 -msphinx . "${PKGDOCS}/en_US/html"
# END docs build from pgadmin4 version 9.4

# Start copying
cd "${SOURCEDIR}/web"

# remove "git log" call in "package.json" file by faking it!
echo "e9319b07fa935f8e7ed6e122b0eccf3b8f73f04d 2025-07-01" > fake-git.hash
sed -i 's/git log -1 --format=\\"%H %as\\"/cat fake-git.hash/' ${SOURCEDIR}/web/package.json

yarn set version berry
yarn set version 4
yarn install
yarn run bundle

cp -r "${SOURCEDIR}/web" "${PKGROOT}/"

cd "${PKGROOT}/web/"
rm -f pgadmin4.db config_local.*
rm -rf jest.config.js babel.* package.json .yarn* yarn* .editorconfig .eslint* node_modules/ regression/ tools/ pgadmin/static/js/generated/.cache
find . -name "tests" -type d -print0 | xargs -0 rm -rf
find . -name "feature_tests" -type d -print0 | xargs -0 rm -rf
find . -name "__pycache__" -type d -print0 | xargs -0 rm -rf

# copy config_distro.py file
cp $CWD/config_distro.py ${PKGROOT}/web/

# Web setup script -- you are on your own for this
mkdir -p ${PKGROOT}/web/usr/bin/
cp ${SOURCEDIR}/pkg/linux/setup-web.sh ${PKGROOT}/web/usr/bin/

# Ensure our venv will use the correct Python interpretor, even if the
# user has configured an alternative default.
# DO THIS LAST!
cd "${PKGVENV}/bin"
PYTHON_INTERPRETER=$(/usr/bin/python3 -c "import os, sys; print(os.path.realpath(sys.executable))")
rm python && ln -s python3 python
rm python3 && ln -s "${PYTHON_INTERPRETER}" python3

# copy other files
cp ${SOURCEDIR}/LICENSE $PKGROOT/
cp ${SOURCEDIR}/README.md $PKGROOT/

# save our build scripts
MYDOC=$BUILDROOT/usr/doc/${PRGNAME}-${VERSION}
mkdir -p $MYDOC
cp $CWD/LICENSE $MYDOC/
cp $CWD/README $MYDOC/
cp $CWD/$PRGNAME.SlackBuild $MYDOC/
cp $CWD/$PRGNAME.info $MYDOC/
cp $CWD/slack-desc $MYDOC/

mkdir -p $BUILDROOT/install
cat $CWD/slack-desc > $BUILDROOT/install/slack-desc
cat $CWD/doinst.sh  > $BUILDROOT/install/doinst.sh

cd $BUILDROOT
/sbin/makepkg -l y -c n ${OUTPUT}/${PRGNAME}-${VERSION}-${ARCH}-${BUILD}${TAG}.txz

exit 0
