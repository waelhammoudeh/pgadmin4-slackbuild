#!/bin/bash

# Updated for pgAdmin4 version 6.0
# Date: October 16/2021

# Slackware build script for pgadmin4
# Copyright 2019 Jeremy Hansen jebrhansen+SBo -at- gmail.com
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Modified by: Wael Hammoudeh - w_hammoudeh at hotmail.com


CWD=$(pwd)
PRGNAME=pgadmin4
VERSION=6.0
BUILD=${BUILD:-1}
TAG=${TAG:-_wh}

OUTPUT=${OUTPUT:-/tmp}
TMP=${TMP:-/tmp/WH}

# call uname() to set ARCH
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

LIBDIRSUFFIX=""
if [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
fi

# we need postgresql bin directory in our path
# check for postgresql package installation - bailout if not found.
# Assume slackpkg use. Is postgresql package installed?
PG_PKG=$(ls /var/lib/pkgtools/packages/postgresql*)

# empty string from ls command above indicates missing PostgreSQL package
if [ -z "$PG_PKG" ]; then
    echo "PostgreSQL package not found. Please install PostgreSQL with"
    echo "slackware package tools. Exiting!"
    exit 1;
fi

# pg_config file is usually installed in postgresql bin directory
PG_BIN_PART1=$(cat $PG_PKG | egrep "*/bin/pg_config")

# empty string means missed up installation!
if [ -z "$PG_BIN_PART1" ]; then
    echo "ERROR: Could not get path for PostgreSQL bin directory."
    echo "Please make sure that PostgreSQL package is installed in"
    echo "your system with slackware package tools"
    echo "Exiting!"
    exit 1;
fi

# prepend leading slash to directory
PG_CONFIG=/$PG_BIN_PART1

# with leading slash this is pg_config file which MUST exist in file system
if [ ! -f "$PG_CONFIG" ]; then
    echo "ERROR: Could not find postgresql pg_config configuration file."
    echo "Ensure that postgresql package is properly installed with slackware"
    echo "package tools. Exiting."
    exit 1
fi

# seems good postgresql package installation. Make sure we get the right libpq
PG_PATH=`dirname $PG_CONFIG`
export PATH=$PG_PATH:$PATH

# check yarn installation
if [ ! -x /usr/bin/yarn ]; then

    echo ""
    echo "ERROR: missing yarn executable! pgAdmin4 version 6.0 requires yarn."
    echo " Yarn build script is available from www.SlackBuilds.org, please"
    echo " install yarn then run this script again ):"
    echo ""
    exit 1
fi

# check nodeJS
if [ ! -x /usr/bin/node ]; then

    echo ""
    echo "ERROR: missing nodeJS executable! pgAdmin4 version 6.0 requires nodeJS 12+"
    echo " nodejs build script is available from www.SlackBuilds.org, please"
    echo " install nodejs then run this script again ):"
    echo ""
    exit 1

fi

# check nodeJS version, must be > 12
VERSTR=`node --version`
VERNUM=`echo $VERSTR | cut -c 1 --complement`
MAJOR=`echo $VERNUM | cut -d "." -f 1`

if [ $MAJOR -lt 12 ]; then
    echo " ERROR: wrong nodeJS version, less than 12. pgAdmin4 requires nodeJS 12+"
    echo " nodejs build script is available from www.SlackBuilds.org, please"
    echo " install nodejs then run this script again ):"
    echo ""
    exit 1
fi

# exit on error
set -e

# Debugging shizz
trap 'ERRCODE=$? && if [ ${ERRCODE} -ne 0 ]; then echo "The command \"${BASH_COMMAND}\" failed in \"${FUNCNAME}\" with exit code ${ERRCODE}."; fi' EXIT

# make skelton directories for our package
BUILDROOT=${TMP}/${PRGNAME}
DESKTOPROOT=${BUILDROOT}/desktop
METAROOT=${BUILDROOT}/meta
SERVERROOT=${BUILDROOT}/server
WEBROOT=${BUILDROOT}/web

SOURCEDIR=${CWD}/${PRGNAME}-${VERSION}

# start with empty directories
rm -rf ${SOURCEDIR} ${BUILDROOT}

mkdir -p $TMP $OUTPUT $BUILDROOT $DESKTOPROOT $METAROOT $SERVERROOT $WEBROOT

tar xvzf $CWD/$PRGNAME-$VERSION.tar.gz

# set sane permissions
chown -R root:root ${SOURCEDIR}
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# patch _build_runtime() function to use pre-downloaded tar ball
patch ${SOURCEDIR}/pkg/linux/build-functions.sh $CWD/nwjs-download.diff

# we use some functions provided by pgAdmin4 developers to build the package
source ${SOURCEDIR}/pkg/linux/build-functions.sh

# APP_NAME varaiable needed by _create_python_virtualenv() function
APP_NAME=${PRGNAME}

_create_python_virtualenv "slackware"

_build_runtime

# build temporary PVE to make docs
$CWD/mk-doc-pve.sh $TMP

DOC_PVE=$TMP/docpve
source $DOC_PVE/bin/activate

_build_docs "slackware"

deactivate

# done with temporary PVE, so we remove it
rm -rf $DOC_PVE

_copy_code

cp -r $SERVERROOT/usr/pgadmin4/ $DESKTOPROOT/usr/

# save our build scripts
mkdir -p $DESKTOPROOT/usr/doc/$PRGNAME-$VERSION
cp $CWD/LICENSE $DESKTOPROOT/usr/doc/$PRGNAME-$VERSION/
cp $CWD/README $DESKTOPROOT/usr/doc/$PRGNAME-$VERSION/
cp $CWD/nwjs-download.diff $DESKTOPROOT/usr/doc/$PRGNAME-$VERSION/
cp $CWD/$PRGNAME.SlackBuild $DESKTOPROOT/usr/doc/$PRGNAME-$VERSION/
cp $CWD/mk-doc-pve.sh $DESKTOPROOT/usr/doc/$PRGNAME-$VERSION/
cp $CWD/$PRGNAME.info $DESKTOPROOT/usr/doc/$PRGNAME-$VERSION/

# copy package description
mkdir -p $DESKTOPROOT/install
cat $CWD/slack-desc > $DESKTOPROOT/install/slack-desc

cd $DESKTOPROOT

/sbin/makepkg -l y -c n $OUTPUT/$PRGNAME-$VERSION-$ARCH-$BUILD$TAG.tgz

exit 0
