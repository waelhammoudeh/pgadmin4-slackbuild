#!/bin/sh -e

# Updated for pgAdmin4 version 6.0 on 10/9/2021

# Slackware build script for pgadmin4
# Copyright 2019 Jeremy Hansen jebrhansen+SBo -at- gmail.com
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Modified by: Wael Hammoudeh - w_hammoudeh at hotmail.com

# Please DO read the README.PVE file.

# This script assumes the use of  Python Virtual Environment.
# A script to initial PVE is provided in the file named "mk-pve.sh" along
# with this script.

CWD=$(pwd)
PRG_NAME=pgadmin4
VERSION=6.0
BUILD=${BUILD:-1}
TAG=${TAG:-_wh}

OUTPUT=${OUTPUT:-/tmp}
TMP=${TMP:-/tmp/WH}
PKG=$TMP/package-$PRG_NAME

# call uname() to set ARCH
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

LIBDIRSUFFIX=""
if [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
fi

PKGLIB=$PKG/usr/lib${LIBDIRSUFFIX}/$PRG_NAME-$VERSION

# path to python virtual environment for version 6.0

PVEPATH=/usr/local/pve/pgAdmin4-pve60

if [ ! -f $PVEPATH/bin/activate ]; then
  echo ""
  echo "Missing or wrong path to application Python Virtual Environment!"
  echo " This slackware build script requires Python Virtual Environment."
  echo " Use the provided script \"mk-pve.sh\" found with this script to"
  echo " initial PVE on your system, and please see the README.PVE file."
  echo " You can run this script afterward."
  echo " Exiting!"
  echo ""
  exit 1;
fi

source $PVEPATH/bin/activate

# Save and check return value from above!
RET_VALUE=$?
SUCCESS=0

if [ $RET_VALUE -ne $SUCCESS ]; then
    echo "ERROR: Could not activate Python Virtual Environment!"
    echo "Make sure to run mk-pve.sh script to set it up."
    echo "Exiting"
    exit 1
fi

# check for postgresql package installation - bailout if not found.
# Assume slackpkg use. Is postgresql package installed?
PG_PKG=$(ls /var/lib/pkgtools/packages/postgresql*)

# empty string from ls command above indicates missing PostgreSQL package
if [ -z "$PG_PKG" ]; then
    echo "PostgreSQL package not found. Please install PostgreSQL with"
    echo "slackpkg. Exiting!"
    exit 1;
fi

# pg_config file is usually installed in postgresql bin directory
PG_BIN_PART1=$(cat $PG_PKG | egrep "*/bin/pg_config")

# empty string means missed up installation!
if [ -z "$PG_BIN_PART1" ]; then
    echo "ERROR: Could not get path for PostgreSQL bin directory."
    echo "Exiting!"
    exit 1;
fi

# prepend leading slash to directory
SLASH=/

# with leading slash this is pg_config file which MUST exist in file system
if [ ! -f "$SLASH$PG_BIN_PART1" ]; then
    echo "ERROR: Could not find postgresql pg_config configuration file."
    echo "Ensure that postgresql package is properly installed with slackware"
    echo "package tools. Exiting."
    exit 1
fi
# seems good postgresql package installation.

# check yarn
if [ ! -x /usr/bin/yarn ]; then

    echo ""
    echo "ERROR: missing yarn executable! pgAdmin4 version 6.0 requires yarn."
    echo " Yarn build script is available from www.SlackBuilds.org, please"
    echo " install yarn then run this script again ):"
    echo ""
    exit 1
fi

# check nodeJS
if [ ! -x /usr/bin/node ]; then

    echo ""
    echo "ERROR: missing nodeJS executable! pgAdmin4 version 6.0 requires nodeJS 12+"
    echo " nodejs build script is available from www.SlackBuilds.org, please"
    echo " install nodejs then run this script again ):"
    echo ""
    exit 1
fi

set -e

rm -rf $PKG $PKGLIB

mkdir -p $TMP $PKG $PKGLIB $OUTPUT

cd $TMP

rm -rf $PRG_NAME-$VERSION
tar xvzf $CWD/$PRG_NAME-$VERSION.tar.gz

cd $PRG_NAME-$VERSION

# set sane permissions
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# fix initial window not showing; this is inside function launchPgAdminWindow()
# in file runtime/src/js/pgadmin.js
# side effect is no zoom control; ctrl +, ctrl - and F10 do not work. Minimize then
# maximize window restores those function. Also covering window with other
# application (window) then setting focus to pgAdmin4 restores all functions.
# Hitting F10 or resizing will draw window without the need for this sed line!
sed -E "s|'show': false,|'show': true,|" -i runtime/src/js/pgadmin.js

# we buil in runtime directory
cd runtime

yarn install --verbose

# do permissions again after yarn install.
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# docs are built in source root AND need python packages from PVE

cd $TMP/$PRG_NAME-$VERSION

make docs
make install-node
make bundle

mkdir -p $PKGLIB/docs/en_US

cp -r runtime $PKGLIB
cp -r web $PKGLIB
cp -r docs/en_US/_build/html $PKGLIB/docs/en_US

# remove not needed
rm -rf $PKGLIB/web/regression
rm -rf "$PKGLIB/docs/en_US/html/_sources"

# remove __pycache__ and test(s) directories
find $PKGLIB/web -name "__pycache__" -type d -print0 | xargs -0 rm -rf
find $PKGLIB/web -name "tests" -type d -print0 | xargs -0 rm -rf
find $PKGLIB/web -name "feature_tests" -type d -print0 | xargs -0 rm -rf

# needed config files
install -Dm 644 /dev/stdin "$PKGLIB/web/config_distro.py" <<END
SERVER_MODE = False
HELP_PATH = "/usr/lib$LIBDIRSUFFIX/$PRG_NAME-$VERSION/docs/en_US/html"
END
cp $PKGLIB/web/config_distro.py $PKGLIB/web/config_local.py

# we need to set paths in dev_config.json file
install -Dm 644 /dev/stdin "$PKGLIB/runtime/dev_config.json" <<END
{
    "pythonPath": "$PVEPATH/bin/python3",
    "pgadminFile": "/usr/lib$LIBDIRSUFFIX/$PRG_NAME-$VERSION/web/pgAdmin4.py"
}
END

# Install icons - we are in source directory
install -Dm 644 pkg/linux/$PRG_NAME-16x16.png \
                "$PKG/usr/share/icons/hicolor/16x16/apps/$PRG_NAME.png"
install -Dm 644 pkg/linux/$PRG_NAME-32x32.png \
                "$PKG/usr/share/icons/hicolor/32x32/apps/$PRG_NAME.png"
install -Dm 644 pkg/linux/$PRG_NAME-48x48.png \
                "$PKG/usr/share/icons/hicolor/48x48/apps/$PRG_NAME.png"
install -Dm 644 pkg/linux/$PRG_NAME-64x64.png \
                "$PKG/usr/share/icons/hicolor/64x64/apps/$PRG_NAME.png"
install -Dm 644 pkg/linux/$PRG_NAME-128x128.png \
                "$PKG/usr/share/icons/hicolor/128x128/apps/$PRG_NAME.png"

# install our script to start application
START_SCRIPT=pgAdmin4-pve.sh
install -Dm 755 $CWD/$START_SCRIPT $PKGLIB/runtime/$START_SCRIPT

# use our start script in desktop file
sed -E "s|Exec=/usr/pgadmin4/bin/pgadmin4|Exec=/usr/lib$LIBDIRSUFFIX/$PRG_NAME-$VERSION/runtime/$START_SCRIPT|" \
       -i pkg/linux/pgadmin4.desktop

install -Dm 644 pkg/linux/pgadmin4.desktop "$PKG/usr/share/applications/pgAdmin4.desktop"

# save our build scripts
mkdir -p $PKG/usr/doc/$PRG_NAME-$VERSION
cp $CWD/LICENSE $PKG/usr/doc/$PRG_NAME-$VERSION/
cp $CWD/README $PKG/usr/doc/$PRG_NAME-$VERSION/
cp $CWD/README.PVE $PKG/usr/doc/$PRG_NAME-$VERSION/
cp $CWD/$PRG_NAME.SlackBuild $PKG/usr/doc/$PRG_NAME-$VERSION/
cp $CWD/pgAdmin4-pve.sh $PKG/usr/doc/$PRG_NAME-$VERSION/
cp $CWD/mk-pve.sh $PKG/usr/doc/$PRG_NAME-$VERSION/
cp $CWD/$PRG_NAME.info $PKG/usr/doc/$PRG_NAME-$VERSION/

# copy package description
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRG_NAME-$VERSION-$ARCH-$BUILD$TAG.tgz
